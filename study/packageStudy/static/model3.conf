# Model CONF 至少应包含四个部分: [request_definition], [policy_definition], [policy_effect], [matchers]

# 用于request的定义，它明确了e.Enforce(...) 函数中参数的含义
[request_definition]
r = sub, obj, act # sub, obj, act 表示经典三元组: 访问实体 (Subject)，访问资源 (Object) 和访问方法 (Action)
# 你可以自定义你自己的请求表单, 如果不需要指定特定资源，则可以这样定义 sub、act ，或者如果有两个访问实体, 则为 sub、sub2、obj、act。

[policy_definition]
p = sub, obj, act

[role_definition] # 是RBAC角色继承关系的定义。 Casbin 支持 RBAC 系统的多个实例, 例如, 用户可以具有角色及其继承关系, 资源也可以具有角色及其继承关系。 这两个 RBAC 系统不会互相干扰。
g = _, _
g2=_,_

[matchers] # matchers定义了策略匹配者。匹配者是一组表达式。它定义了如何根据请求来匹配策略规则
m = g(r.sub, p.sub) && g2(r.obj, p.obj) && r.act == p.act

[policy_effect] # 对policy生效范围的定义
e = some(where (p.eft == allow))
# 该Effect原语表示如果存在任意一个决策结果为allow的匹配规则，则最终决策结果为allow，即allow-override。
# 其中p.eft表示策略规则的决策结果，可以为allow或者deny，当不指定规则的决策结果时,取默认值allow 。
# 通常情况下，policy的p.eft默认为allow， 因此前面例子中都使用了这个默认值。
# some量词判断是否存在一条策略规则满足匹配器。
# any 量词则判断是否所有的策略规则都满足匹配器 (此处未使用)。 policy effect还可以利用逻辑运算符进行连接：
# 如e = some(where (p.eft == allow)) && !some(where (p.eft == deny))